{"body":"\r\n# insulaudit\r\n\r\nHomepage: https://github.com/bewest/insulaudit\r\n\r\nThis python package provides a toolkit for dealing with data used and\r\ncreated by a \"modern,\" circa 2010, insulin therapy regimen.\r\n\r\nWe provide a command line text based tool, and a python\r\nlibrary to audit therapeutic data from a variety of\r\nmedical devices widely used.\r\n\r\n## Target Devices\r\n  * Medtronic Minimed Paradigm Series insulin pumps\r\n    using the usbstick\r\n\r\n    * observed working with a 522\r\n\r\n  * Lifescan Glucose Meters:\r\n\r\n    * Onetouch series\r\n    * Mini/Profile\r\n\r\n# Using the USB Stick\r\n\r\n## Lifescan\r\nNothing special, my system registers a serial device right\r\naway.\r\n\r\n## Minimed\r\nIn linux, you need to poke the usbserial module with some\r\nparameters to make it work.  This only needs to be done\r\nonce::\r\n  \r\n    sudo modprobe usbserial vendor=0x0a21 product=0x8001\r\n    # or\r\n    sudo ./reset.sh\r\n    # which runs ./remove.sh and ./insert.sh, the latter\r\n    # of which does the modprobe for you.\r\n\r\nI've observed runs working up to 5 times in a row, at\r\nwhich point I needed to reset the usbstick by removing it\r\nand re-inserting into the PC.\r\nOn mac, I can't recall if this is necessary.  We just need\r\na generic usb-serial adapter.  I haven't tried it, but I\r\nsuspect COM1 will likely work on MS, although\r\nauto-scanning will not detect it.  If your mac inserts the\r\ndevice somewhere under /dev/usb.serial* we will likely\r\nscan it.\r\n\r\nIn dmesg, you should see a message like this when you\r\ninser the usb stick::\r\n  \r\n    [201197.513266] usb 2-1: new full speed USB device using uhci_hcd and address 3\r\n    [201197.919110] usb 2-1: configuration #1 chosen from 1 choice\r\n    [201205.729621] usbcore: registered new interface driver usbserial\r\n    [201205.730808] USB Serial support registered for generic\r\n    [201205.731143] usbcore: registered new interface driver usbserial_generic\r\n    [201205.731145] usbserial: USB Serial Driver core\r\n    [201205.806220] USB Serial support registered for pl2303\r\n    [201205.806248] pl2303 2-1:1.0: pl2303 converter detected\r\n    [201208.305166] usb 2-1: pl2303 converter now attached to ttyUSB0\r\n    [201208.305187] usbcore: registered new interface driver pl2303\r\n    [201208.305189] pl2303: Prolific PL2303 USB to serial adaptor driver\r\n    bewest@mimsy:~/Documents/bb/diabetes/src/mock$ \r\n\r\n# Installing insulaudit\r\nThere is no release of insulaudit, only somewhat broken\r\npieces of code towards establishing a tool.\r\n:::\r\n   \r\n    # Download the source\r\n    # https://github.com/bewest/insulaudit\r\n    # or fork it on github\r\n    git clone http://github.com/bewest/insulaudit.git\r\n    # install insulaudit in your python runtime so you can\r\n    # hack on it from here\r\n    python setup.py develop\r\n\r\n# Status quo\r\nWe can say hello to the pump, but it's easier to read\r\nconfiguration than historical data.  We are not sure how\r\nto decode historical data.\r\n\r\nAs [Thucydides said](http://en.wikipedia.org/wiki/Thucydides)\r\n> Right, as the world goes, is only in question between\r\n> equals in power, while the strong do what they can and\r\n> the weak suffer what they must.\r\n\r\nWhen vendors offering medical equipment put their own\r\npriorities ahead of safe therapy, and then prevent access\r\nto making it safer, it's time to put on the\r\n[black hat for science](https://github.com/bewest/insulaudit/blob/master/pcap/andy/zero.py).\r\n\r\n# How to run\r\nThe commands using PYTHONPATH assume you are in the root\r\ndirectory of the repo.\r\nThe commands using insulaudit assume you have installed\r\ninsulaudit on your system (including the develop version).\r\n\r\nUses flaky port scanning feature to test if we are able to\r\ntalk to a pump.  Exchange a few bytes, nothing more::\r\n     \r\n    # fails\r\n    PYTHONPATH=src/ python -m insulaudit.main -v clmm   hello\r\n    insulaudit -v clmm hello\r\n\r\nSpecifying a port seems to work.  If it doesn't, retry a\r\nfew times. ::\r\n    \r\n    # using the subcommand stuff:::\r\n    PYTHONPATH=src/ python -m insulaudit.main -v clmm --port /dev/ttyUSB0  hello\r\n    insulaudit -v clmm --port /dev/ttyUSB0 hello\r\n    \r\n    # run the protocol exercise directly\r\n    PYTHONPATH=src/ python src/insulaudit/devices/clmm/proto.py /dev/ttyUSB0\r\n    python -m insulaudit.devices.clmm.proto.py /dev/ttyUSB0\r\n\r\n    # read-pump-model.log - protocol exercise to read pump\r\n    model number.  Log of it running successfully 5 times\r\n    before it starts failing.  stderr and timestamps were\r\n    not capture. :-(\r\n\r\n# TODO\r\nNow that the basic framework is taking shape, the protocol\r\nsupport needs to be stabilized and the framework needs to\r\ncontinue to gel a bit.  I need a reliable protocol, but\r\nthere is a retry bug demonstrated earlier that prevents very\r\nclean and repeatable runs.\r\n\r\n\r\n  * stabilize runs of both proto.py and hello\r\n  * expand protocol: ReadHistoryData 205\r\n  * pyserial in git\r\n  * convert hello to some kind of scan\r\n  * introduce new device flows\r\n  * introduce device profiles/console flows\r\n  * record logs\r\n  * review logs\r\n  * audit logs\r\n\r\n    * merge logs\r\n    * search\r\n    * reformat\r\n\r\n##cli tool insulaudit\r\n  * init - set up a config, from default\r\n  * checkPort/scan - scan for a port/device\r\n  * device\r\n\r\n    * profile\r\n    * log \r\n\r\n\r\n## clmm pump comms - coms.msc\r\nMessage sizes are always in 64 byte chunks, except\r\noutgoing messages.\r\nUse the radio command to send a\r\nmessage. Generally write each command twice.\r\nThis is kind of a \"send command\" command.\r\n\r\n```text\r\n  \r\n                 pc      usb     \r\n                 |       |       \r\n  write          |------>|      Hint: code is 14th byte (bytes[13])\r\n  read           |<------|      3 bytes [ 0x01, 0x85 U, ?? ] == success\r\n                 |       |              [ 0x01, 0x85 f, ?? ] == fail\r\n  write          |------>|      code=[ 0x03 ] usb status command\r\n  repeat         |       |<     Continually ask for the usb status until\r\n                 |       |      the stick indicates that we are done\r\n                 |       |      receiving and we have a length.\r\n  read           |<------|      length = bytes[6..8]\r\n  read           |<------|      tx.stats = bytes[5]\r\n  format         |<      |      Then use the length to format the flush \r\n                 |       |      command, which will give us the\r\n                 |       |      contents of radio buffer.\r\n  write          |------>|      command [ 0x0C, 0x00, 0x00, HighByte(length),\r\n                 |       |                HighByte(length), LowByte(length)  ]\r\n  read           |<------|      read data in 64 byte chunks until we've got\r\n                 |       |      the amount of data we expected\r\n                 |       |       \r\n\r\n```\r\n\r\n\r\nSome Commands\r\n-------------\r\n\r\n::\r\n\r\n    devices/\r\n      SyncCommand\r\n      ComLink2/\r\n        CMD_READ_STATUS = 3;\r\n        CMD_READ_PRODUCT_INFO = 4;\r\n        CMD_READ_INTERFACE_STATS = 5;\r\n        CMD_READ_SIGNAL_STRENGTH = 6;\r\n        CMD_READ_DATA = 12;\r\n      LSMeter/\r\n        LEN_READ_CLOCK = 50;\r\n        IO_DELAY_READ_RETRY_MS = 10000;\r\n      LSOneTouchUltraMini\r\n        READ_TIMEOUT_MS = 500\r\n      LSOneTouchUltraSmart\r\n        CMD_READ_CLOCK = \"DMF\\r\";\r\n        READ_TO_MS = 1500;\r\n\r\n      MMMeter/\r\n        CMD_READ_CLOCK = 160;\r\n        CMD_READ_SETTINGS = 162;\r\n        CMD_READ_GLUCOSE_DATA = 128;\r\n        LEN_READ_CLOCK = 28;\r\n        LEN_READ_SETTINGS = 72;\r\n        LEN_READ_GLUCOSE_DATA = 44;\r\n        READ_TO_MS = 2500;\r\n        READ_DATA_OFFSET = 0;\r\n        READ_MEM_DATA_OFFSET = 2;\r\n        MAX_READ_BYTES = 250;\r\n      MMPump/\r\n       WRITE_DELAY_MS = 3;\r\n\r\n      MMPump508/\r\n        CMD_READ_RTC = 32;\r\n        CMD_READ_PUMP_ID = 33;\r\n        CMD_READ_FIRMWARE_VER = 37;\r\n        CMD_READ_ERROR_STATUS = 38;\r\n        CMD_READ_REMOTE_CTRL_ID = 46;\r\n        REC_SIZE_READ_PUMP_ID = 10;\r\n        REC_SIZE_READ_FIRMWARE_VER = 8;\r\n        REC_SIZE_READ_RTC = 7;\r\n        CMD_READ_BATTERY_STATUS = 34;\r\n        CMD_READ_REMAINING_INSULIN = 35;\r\n        CMD_READ_BOLUS_HISTORY = 39;\r\n        CMD_READ_DAILY_TOTALS = 40;\r\n        CMD_READ_PRIME_BOLUSES = 41;\r\n        CMD_READ_ALARMS = 42;\r\n        CMD_READ_PROFILE_SETS = 43;\r\n        CMD_READ_USER_EVENTS = 44;\r\n        CMD_READ_128K_MEM = 55;\r\n        CMD_READ_256K_MEM = 56;\r\n        CMD_READ_TEMP_BASAL = 64;\r\n        CMD_READ_TODAYS_TOTALS = 65;\r\n        CMD_READ_STD_PROFILES = 66;\r\n        CMD_READ_A_PROFILES = 67;\r\n        CMD_READ_B_PROFILES = 68;\r\n        REC_SIZE_READ_PUMP_ID = 10;\r\n        REC_SIZE_READ_FIRMWARE_VER = 8;\r\n        REC_SIZE_READ_RTC = 7;\r\n        REC_SIZE_READ_TODAYS_TOTAL = 4;\r\n        REC_SIZE_READ_TEMP_BASAL = 4;\r\n        REC_SIZE_READ_CURR_SETTINGS1 = 28;\r\n        REC_SIZE_READ_CURR_SETTINGS2 = 26;\r\n        REC_SIZE_READ_CURR_SETTINGS3 = 4;\r\n        REC_SIZE_READ_CURR_SETTINGS4 = 2;\r\n\r\n      MMPump511/\r\n        SuspendResume        = 77;\r\n        PushKeypad           = 91;\r\n        PowerCTRL            = 93;\r\n        ReadRTC              = 112;\r\n        ReadPumpId           = 113;\r\n        ReadBatteryStatus    = 114;\r\n        ReadRemainingInsulin = 115;\r\n        ReadFirmwareVersion  = 116;\r\n        ReadErrorStatus      = 117;\r\n        ReadRadioCtrlACL     = 118;\r\n        ReadBasalTemp        = 120;\r\n        ReadTotalsToday      = 121;\r\n        ReadProfiles_STD     = 122;\r\n        ReadProfiles_A       = 123;\r\n        ReadProfiles_B       = 124;\r\n        ReadSettings         = 127;\r\n        ReadHistoryData      = 128;\r\n        ReadPumpStatus       = 131;\r\n        ReadPumpTrace        = 163;\r\n        ReadDetailTrace      = 164;\r\n        ReadNewTraceAlarm    = 166;\r\n        ReadOldTraceAlarm    = 167;\r\n\r\n      MMPump512/ # test pump is a 512\r\n        CMD_READ_SETTINGS = 145;\r\n        CMD_READ_TEMP_BASAL = 152;\r\n        CMD_READ_STD_PROFILES\r\n        CMD_READ_A_PROFILES = 147;\r\n        CMD_READ_B_PROFILES = 148;\r\n        CMD_READ_BG_ALARM_CLOCKS = 142;\r\n        CMD_READ_BG_ALARM_ENABLE = 151;\r\n        CMD_READ_BG_REMINDER_ENABLE = 144;\r\n        CMD_READ_BG_TARGETS = 140;\r\n        CMD_READ_BG_UNITS = 137;\r\n        CMD_READ_BOLUS_WIZARD_SETUP_STATUS = 135;\r\n        CMD_READ_CARB_RATIOS = 138;\r\n        CMD_READ_CARB_UNITS = 136;\r\n        CMD_READ_LOGIC_LINK_IDS = 149;\r\n        CMD_READ_INSULIN_SENSITIVITIES = 139;\r\n        CMD_READ_RESERVOIR_WARNING = 143;\r\n        CMD_READ_PUMP_MODEL_NUMBER = 141;\r\n        CMD_READ_LANGUAGE = 134;\r\n\r\n      MMGuardian3/\r\n        CMD_READ_SENSOR_SETTINGS = 207;\r\n        CMD_READ_SENSOR_ALARM_SILENCE = 211;\r\n        CMD_READ_SENSOR_DEMO_AND_GRAPH_TIMEOUT = 210\r\n        CMD_READ_SENSOR_PREDICTIVE_ALERTS = 209;\r\n        CMD_READ_SENSOR_RATE_OF_CHANGE_ALERTS = 212;\r\n\r\n      MMX15/\r\n        CMD_READ_SETTINGS = 192;\r\n        CMD_READ_BG_TARGETS = 159;\r\n        CMD_READ_CURRENT_HISTORY_PAGE_NUMBER = 157;\r\n        CMD_READ_SAVED_SETTINGS_DATE = 193;\r\n        CMD_READ_CONSTRAST = 195;\r\n        CMD_READ_BOLUS_REMINDER_ENABLE = 197;\r\n        CMD_READ_BOLUS_REMINDERS = 198;\r\n        CMD_READ_FACTORY_PARAMETERS = 199;\r\n        CMD_READ_CURRENT_PUMP_STATUS = 206;\r\n\r\n      MMX22/ # production pump is a 522\r\n        CMD_WRITE_GLUCOSE_HISTORY_TIMESTAMP = 40;\r\n        CMD_READ_CURRENT_GLUCOSE_HISTORY_PAGE_NUMBER = 205;\r\n        CMD_READ_GLUCOSE_HISTORY = 154;\r\n        CMD_READ_CALIBRATION_FACTOR = 156;\r\n        CMD_READ_ISIG_HISTORY = 155;\r\n        CMD_READ_SENSOR_SETTINGS = 153;\r\n\r\n      MMX23/\r\n        CMD_READ_VCNTR_HISTORY = 213;\r\n        CMD_READ_OTHER_DEVICES_IDS = 240;\r\n\r\n\r\nBlather\r\n-------\r\n\r\n::\r\n  \r\n  devices/\r\n    lsultramini\r\n    onetouch2\r\n  --TO--\r\n  devices/\r\n    DeviceApp\r\n    * get_devices\r\n      * lsultramini\r\n        ui.py\r\n        proto.py\r\n      * onetouch2\r\n        proto.py\r\n      * clmm/\r\n        ui.py - \r\n        proto.py - provides protocol utitilities, subclassing \r\n          exports classes to use with a core/link\r\n    base.py\r\n  \r\n   \r\n  profile.py\r\n    * checked_at\r\n    * created_at\r\n    * version? insulaudit vs rep/format\r\n    * serial\r\n    * model\r\n    * manufacturer\r\n    * drift_t\r\n    * uri\r\n\r\n  ui.py\r\n    * username, short user, write_err, interactive, flush, edit, traceback,\r\n      note, debug, prompt, prompt_choice, getpass, log, label, termwidth,\r\n      expandpath, plain, config stuff, readconfig, has_section, config,\r\n      setconfig, configsource, configpath, progress,\r\n\r\n  commands.py - pulls \r\n  main.py - main entry point, configure the system, and run the console\r\n    * subclass application from console\r\n    * get the list of devices from devices/\r\n    * \r\n    Command\r\n    Subcommand\r\n    Flow\r\n    LinkedCommand\r\n\r\n  core/\r\n    * CommBuffer TODO: rename to SerialLink?\r\n    * command\r\n    * exceptions\r\n    * response\r\n    device\r\n    link\r\n  data/\r\n  console/\r\n    __init__.py\r\n    devices\r\n\r\n# Usage\r\n::\r\n\r\n  insulaudit [opts] [command]\r\n  insulaudit <device> [opts] [command]\r\n  insulaudit [device] [command] [opts]\r\n\r\n  insulaudit clmm scan\r\n\r\n\r\n## License\r\nAuthor\r\n  Ben West <bewest+insulaudit@gmail.com>\r\n\r\nThis experimental software is provided under the `MIT\r\nlicense`_, so you can do with it whatever you wish except\r\nhold me responsible if it does something you don't like.\r\n\r\n.. _MIT license: http://www.opensource.org/licenses/mit-license.php\r\n\r\n# Fidelity of Care\r\n\r\nPatients need open access to all the elements of\r\ntechnology involved in therapy in order to ensure safety.\r\n\r\nOne of many concrete examples involves generating safe\r\ninsulin doses.  The vendor hard coded the active lifetime\r\nof insulin into all models earlier than the 515 series.\r\nThis guarantees that patients receive the wrong amount of\r\ninsulin.  The only feasible way of getting safer doses of\r\ninsulin is to buy a pump in the 515 series or newer.\r\nUsers who do choose to buy a new pump can customize this\r\nvariable but the variable remains static and mostly\r\nincorrectly calibrated until it's manually changed again.\r\nIn reality, your sensitivity to insulin varies, and the\r\namount of insulin one should receive also varies\r\ndramatically throughout the day depending on what life\r\nthrows your way.\r\n\r\nHowever, the pump has an administrative protocol that\r\nallows software to automatically audit logs, reconfigure\r\nsettings, create and administer dosing schedules.  If\r\nusers had access to this protocol we could use it to work\r\naround bugs like incorrect insulin calibrations in order\r\nto tune our doses.  We can also use the protocol to audit\r\nthe logs, allowing us to independently verify that pump\r\ntherapy is safe.\r\n\r\nThere are many other examples where having direct access\r\nto all the technology involved in therapy provides an\r\nepistemic certainty integral to basic science.  As\r\npatients and users of medical technology, we want to\r\nbelieve that it is safe.  The only way to do this is to\r\nempirically study all the relevant details of vendor\r\ntechnology with our peers and to study it for bugs and\r\nsafety.  In the process of doing this we discovered that\r\nthe same commands used to audit the native therapeutic\r\nlogs can also be used to reconfigure the device, and\r\nadminister insulin in ways that can work around bugs that\r\nare currently ensuring unsafe dosing for pump users.\r\n\r\nThe manufacturer is content to give me inaccurate dosings,\r\nbut refuses to share information about the protocol needed\r\nto quickly, safely and independently manage my therapy.\r\nAs patients we need access to all the technology in our\r\ntherapy so that we can have epistemic certainty that it is\r\nsafe.\r\n\r\nWe set out to use the protocol in order to audit logs more\r\neffectively and found out it's possible to generate safer\r\ndoses and work around bugs in vendors' therapeutic\r\nsoftware.  The protocol is actively kept from our use, but\r\nwe need it in order to secure safe therapy.  Without\r\nhaving investigated the technology involved in our\r\ntherapy, we cannot believe it is safe, and we would not\r\nhave learned about it's true capabilities.\r\n\r\n### Thought exercises\r\nIf a doctor approached you with a syringe, said you needed\r\nsome of it but wasn't personally sure a.) how much was in\r\nthe syringe, that b.) the syringe sometimes injects the\r\nwrong amount, and c.) what contents of the syringe might\r\ndue to the way the syringe performs, but that someone told\r\nhim this would probably be \"ok\" would you allow yourself\r\nto be injected?  What if the consequences for refusing the\r\nsyringe was death?  What if the reason for the uncertainty\r\nwas because someone had wiped off most of the calibration\r\nmarkings before giving it to the doctor to fill?  What if\r\nthe person who had wiped off the markings was the same\r\nperson insisting it was safe and selling you the syringes,\r\nand no one else makes syringes?\r\n\r\nFor the argument \"Most users won't need access to\r\ntechnology to get what they need.\"  This isn't an argument\r\nfor preventing patients from accessing critical parts of their\r\nown therapy.  This is like arguing no one would need to do\r\nanything more than borrow a book from a library shortly\r\nafter the printing press because the population was\r\nunlettered and homes lacked bookshelves to house the\r\nbooks.\r\n# Blather\r\n## \"Blah blah blah.\"\r\n\r\nDiabetes therapy is wasteful, unscientific, and dangerous.\r\nDespite a variety of companies offering software to manage\r\nthe condition, very little data is used to drive real time\r\ndecision making during the course of therapy.  Many users\r\ntake error prone and time consuming handwritten\r\ntranscriptions of their devices, because the software\r\nprovided is incapable of communicating or managing\r\ntherapeutic details in any useful way.  Some users\r\nactually take pictures, and upload those pictures to\r\nwebsites, finding that the easiest way to share critical\r\ntherapy data.\r\n\r\nDespite all the hard work diabetics undertake in efforts\r\naudit and control ongoing therapy, most use a variety of\r\nmobile devices that automatically log many details.\r\nIn 2011, we have a nascent highly connected world where\r\nrelationships construct a social graphs traversable on\r\nthe web with enough security to trust these relationships\r\nfor authentication.  Despite all the technical\r\nadvancement in our world, the medical community asks\r\ndiabetic patients to live inhumane lives maintaining open\r\nwounds while blaming them for lack of control and failing\r\nto explain cause and effect.\r\n\r\nInsulin is a powerful drug best administered by a\r\npancreas.  When we use a syringe to inject a large dose\r\nall at once, it is no surprise to see dangerous\r\nconsequences.  However, instead of developing ever\r\nincreasingly accurate predictions, the use of software in\r\nmanaging diabetes mostly involves entering and massaging\r\nlots of data.  As a result, many diabetics suffer\r\nneedlessly, blamed for the effect \"their condition\" has on\r\nthem due to their poor control, even though the\r\nconsequences are likely aggravated or caused by the very\r\ntherapy they are trying to participate in.  This is poor\r\nfidelity of care.\r\n\r\nThe best example for this is the NPR obituary for a\r\nbaseball hall of famer who died of diabetic complications.\r\nWhile he was praised for his adherence to his regimen, he\r\nwas also praised his tenacity on the field, despite the\r\nterrible shakes attributed to \"his condition.\"  However,\r\nthey failed to mentioned that the shakes he suffered were\r\ndue to the therapy for his condition; the only way a type\r\n1 diabetic suffers shakes like that is when too much\r\ninsulin has been delivered, an all too familiar mishap.\r\nPoor fidelity of care is not knowing what to expect,\r\ndespite adhering to a therapy.\r\n\r\nBy applying the fundamentals of the scientific method to\r\ntherapy, and to the application of technology to therapy,\r\nwe get a unique perspective on what the technology should\r\ndo, and the role people have in therapy.\r\nThe only data we should be entering are corrections on what we\r\npredict will happen.  This is  be one of the ideal\r\napplications of technology to therapy through a lense I\r\ncall high \"fidelity of care.\" Together, we adjust our\r\nexpectations to match what is possible so that over time\r\nthe observations of therapy exactly match the expectations\r\nwe recorded as predictions earlier.\r\n\r\nAs we integrate calendar data and predictions along side\r\npast observations, we get a better understanding of causes\r\nand effects in the outcomes of our own therapy while\r\ngaining tools to communicate these understandings with our\r\ntherapeutic team, composed of any individual we choose.\r\nThe therapeutic team may well be mostly composed of\r\nmembers outside the medical community, because social\r\nsupport is often important in maintaining habits and\r\nlifestyle.\r\n\r\nThis meta observation of the delta between hypothesis and\r\nempirical data is a principle component of the scientific\r\nmethod, but entirely absent from therapeutic software,\r\nleading to a dearth in fidelity of care.  My hope is that\r\ninsulaudit can help to increase the fidelity of care.  The\r\nscientific method involves recording high fidelity\r\nobservations, making predictions based on that data,\r\nperforming an experiment, and then analyzing the\r\ndifferences between the observations and the expectations.\r\nTherapy should not be any different.  However, until we\r\ncan get transparent access to audit the raw data produced\r\nby our therapy, we cannot get an accurate perspective of\r\nour own health.\r\n\r\nTherefore, the first fundamental principle of high\r\nfidelity care is open access to all the intimate details\r\nof therapeutic care in as close to the native format as\r\npossible.  It includes access to the protocols\r\ntransporting the data, so that novel applications can\r\naugment therapeutic fidelity in ways unforeseen by the\r\noriginal makers, for the benefit of the patient, and their\r\ncaregivers.\r\n\r\nThe second is peer review.  A caregiver may be a friend,\r\nor even a good samaritan in a time of need, who needs\r\ninstructions on what to do next.  A caregiver may be a\r\nresearcher who needs access to data for simulations.  It\r\nincludes access to the firmware, because it is outrageous\r\nthat the software that governs lives has not gone through\r\nopen source review for bugs and safety.\r\n\r\nWith these in place, safe and effective from insulaudit,\r\nSMART, DUBS, GCCS, and many other collaborators can help\r\ninfuse therapeutic practice with high fidelity care.\r\nThe needs of the patient in the practice of high fidelity\r\ncare are not unique to diabetics.  We believe all patients\r\nwill benefit from the application of these principles\r\nthroughout their care.\r\n\r\n~ [insulaudit collaborators](https://github.com/bewest/insulaudit/network/members) \r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Insulaudit","tagline":"hacking diabetes: open source driver to audit medical devices"}