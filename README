
Author: Ben West


insulaudit
==========

This python package provides a toolkit for dealing with data used and
created by a "modern," circa 2010, insulin therapy regimen.

``sudo modprobe usbserial vendor=0x0a21 product=0x8001``

Meter Dmesg::
  
  [201197.513266] usb 2-1: new full speed USB device using uhci_hcd and address 3
  [201197.919110] usb 2-1: configuration #1 chosen from 1 choice
  [201205.729621] usbcore: registered new interface driver usbserial
  [201205.730808] USB Serial support registered for generic
  [201205.731143] usbcore: registered new interface driver usbserial_generic
  [201205.731145] usbserial: USB Serial Driver core
  [201205.806220] USB Serial support registered for pl2303
  [201205.806248] pl2303 2-1:1.0: pl2303 converter detected
  [201208.305166] usb 2-1: pl2303 converter now attached to ttyUSB0
  [201208.305187] usbcore: registered new interface driver pl2303
  [201208.305189] pl2303: Prolific PL2303 USB to serial adaptor driver
  bewest@mimsy:~/Documents/bb/diabetes/src/mock$ 



clmm pump comms - coms.msc
__________________________
Message sizes are always in 64 byte chunks, except
outgoing messages.
Use the radio command to send a
message. Generally write each command twice.
This is kind of a "send command" command.

::
  
                 pc      usb     
                 |       |       
  write          |------>|      Hint: code is 14th byte (bytes[13])
  read           |<------|      3 bytes [ 0x01, 0x85 U, ?? ] == success
                 |       |              [ 0x01, 0x85 f, ?? ] == fail
  write          |------>|      code=[ 0x03 ] usb status command
  repeat         |       |<     Continually ask for the usb status until
                 |       |      the stick indicates that we are done receiving and we
                 |       |      have a length.
  read           |<------|      length = bytes[6..8]
  read           |<------|      tx.stats = bytes[5]
  format         |<      |      Then use the length to format the flush 
                 |       |      command, which will give us the
                 |       |      contents of radio buffer.
  write          |------>|      command [ 0x0C, 0x00, 0x00, HighByte(length),
                 |       |                HighByte(length), LowByte(length)  ]
  read           |<------|      read data in 64 byte chunks until we've got
                 |       |      the amount of data we expected
                 |       |       



Some Commands
-------------

::

    devices/
      SyncCommand
      MMPump511/
        SuspendResume        = 77;
        PushKeypad           = 91;
        PowerCTRL            = 93;
        ReadRTC              = 112;
        ReadPumpId           = 113;
        ReadBatteryStatus    = 114;
        ReadRemainingInsulin = 115;
        ReadFirmwareVersion  = 116;
        ReadErrorStatus      = 117;
        ReadRadioCtrlACL     = 118;
        ReadBasalTemp        = 120;
        ReadTotalsToday      = 121;
        ReadProfiles_STD     = 122;
        ReadProfiles_A       = 123;
        ReadProfiles_B       = 124;
        ReadSettings         = 127;
        ReadHistoryData      = 128;
        ReadPumpStatus       = 131;
        ReadPumpTrace        = 163;
        ReadDetailTrace      = 164;
        ReadNewTraceAlarm    = 166;
        ReadOldTraceAlarm    = 167;

      MMPump512/ # test pump is a 512
        ...

      MMPump522/ # production pump is a 522
        ...
~~~~
TODO
~~~~

cli tool insulaudit
~~~~~~~~~~~~~~~~~~~
  * init - set up a config, from default
  * checkPort/scan - scan for a port/device
  * device
    * profile
    * log 

::
  
  devices/
    lsultramini
    onetouch2
    
  core/
    * CommBuffer TODO: rename to SerialLink?
    * command
    * exceptions
    * response
  data
  insulaudit.py
  console/
    __init__.py
    cmdutil.py
    main.py - cli
    commands
    devices

Usage
~~~~~
::

  insulaudit [opts] [command]
  insulaudit <device> [opts] [command]
  insulaudit [device] [command] [opts]

  insulaudit 



